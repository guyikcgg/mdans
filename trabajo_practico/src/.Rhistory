nombre.mydata   = "bankloan"
mydata.numeric.scaled = scale(mydata.numeric)
columna         = mydata.numeric[, indice.columna]
nombre.columna  = names(mydata.numeric)[indice.columna]
columna.scaled  = mydata.numeric.scaled[, indice.columna]
# Chunk 30
cuartil.primero = quantile(columna, 0.25)
cuartil.tercero = quantile(columna, 0.75)
iqr = cuartil.tercero-cuartil.primero
# Chunk 31
extremo.superior.outlier.normal  = (iqr * 1.5) + cuartil.tercero
extremo.inferior.outlier.normal  = cuartil.primero - (iqr * 1.5)
extremo.superior.outlier.extremo = (iqr * 3) + cuartil.tercero
extremo.inferior.outlier.extremo = cuartil.primero - (iqr * 3)
vector.es.outlier.normal  =
columna > extremo.superior.outlier.normal |
columna < extremo.inferior.outlier.normal
print(paste("Total de outliers normales:", sum(vector.es.outlier.normal)))
vector.es.outlier.extremo =
columna > extremo.superior.outlier.extremo |
columna < extremo.inferior.outlier.extremo
print(paste("Total de outliers extremos:", sum(vector.es.outlier.extremo)))
# Chunk 32
# Outliers normales
claves.outliers.normales = which(vector.es.outlier.normal)
data.frame.outliers.normales = mydata.numeric[vector.es.outlier.normal,]
print(paste0("Outliers normales en la columna '", nombre.columna, "':"))
print(data.frame.outliers.normales)
# Outliers extremos
claves.outliers.extremos = which(vector.es.outlier.extremo)
data.frame.outliers.extremo = mydata.numeric[vector.es.outlier.extremo,]
print(paste0("Outliers extremos en la columna '", nombre.columna, "':"))
print(data.frame.outliers.extremo)
# Chunk 33
valores.normalizados.outliers.normales = columna.scaled[vector.es.outlier.normal]
valores.normalizados.outliers.normales
# Chunk 34
MiPlot_Univariate_Outliers(columna, claves.outliers.normales, paste(nombre.columna, "> outliers normales"))
MiPlot_Univariate_Outliers(columna, claves.outliers.extremos, paste(nombre.columna, "> outliers extremos"))
# Chunk 35
MiBoxPlot_IQR_Univariate_Outliers(mydata.numeric, indice.columna)
MiBoxPlot_IQR_Univariate_Outliers(mydata.numeric.scaled, indice.columna)
# Chunk 36
# Cálculo de outliers en cada columna.
# El resultado es un dataframe del mismo tamaño que nuestro dataset,
# cuyas columnas se corresponden a los valores calculados anteriormente
# en la variable `vector.es.outlier.normal`
frame.es.outlier = as.data.frame(sapply(
1:ncol(mydata.numeric),
function(x) vector_es_outlier_IQR(mydata.numeric, x)
))
names(frame.es.outlier) = names(mydata.numeric)
head(frame.es.outlier, 10)
print("Número total de outliers por columna:")
print(apply(frame.es.outlier, 2, sum))
indices.de.outliers.en.alguna.columna.como.una.lista =
sapply(
1:ncol(mydata.numeric),
function(x) {
vector_claves_outliers_IQR(mydata.numeric, x)
}
)
indices.de.outliers.en.alguna.columna =
unlist(indices.de.outliers.en.alguna.columna.como.una.lista)
print("Filas en las que hay outliers:")
indices.de.outliers.en.alguna.columna
# Chunk 37
head(mydata.numeric.scaled[indices.de.outliers.en.alguna.columna , ], 10)
# Chunk 38
MiBoxPlot_juntos (mydata.numeric) + coord_flip()
# Chunk 39
columna = mydata.numeric$ingresos
test.de.Grubbs = grubbs.test(columna, two.sided = TRUE)
test.de.Grubbs
alpha = 0.025
if (test.de.Grubbs$p.value < alpha){
indice.de.outlier.Grubbs =
order(abs(columna - mean(columna)), decreasing = T)[1]
valor.de.outlier.Grubbs  =
columna[indice.de.outlier.Grubbs]
}
print("Índice del outlier encontrado:")
indice.de.outlier.Grubbs
print("Valor del outlier encontrado:")
valor.de.outlier.Grubbs
MiPlot_Univariate_Outliers(
columna,
indice.de.outlier.Grubbs,
"Test de Grubbs sobre la columna 'ingresos'"
)
# Chunk 40
columna = c(45,56,54,34,32,45,67,45,67,154,125,65)
test.de.Grubbs = grubbs.test(columna, two.sided = TRUE)
test.de.Grubbs$p.value
if (test.de.Grubbs$p.value < alpha){
indice.de.outlier.Grubbs =
order(abs(columna - mean(columna)), decreasing = T)[1]
valor.de.outlier.Grubbs  =
columna[indice.de.outlier.Grubbs]
}
MiPlot_Univariate_Outliers(
columna,
indice.de.outlier.Grubbs,
"Test de Grubbs con outlier enmascarado"
)
# Chunk 41
test.de.rosner = rosnerTest(columna, k=4)
is.outlier.rosner = test.de.rosner$all.stats$Outlier
k.mayores.desviaciones.de.la.media = test.de.rosner$all.stats$Obs.Num
indices.de.outliers.rosner = k.mayores.desviaciones.de.la.media[is.outlier.rosner]
valores.de.outliers.rosner = columna[indices.de.outliers.rosner]
print("Índices de las k-mayores desviaciones de la media")
k.mayores.desviaciones.de.la.media
print("De los k valores fijados, ¿Quién es outlier?")
is.outlier.rosner
print("Los índices de los outliers son:")
indices.de.outliers.rosner
print("Los valores de los outliers son:")
valores.de.outliers.rosner
MiPlot_Univariate_Outliers(
columna,
indices.de.outliers.rosner,
"Test de Rosner"
)
# Chunk 42
columna = mydata.numeric$ingresos
MiPlot_resultados_TestRosner(columna)
# Chunk 43
# Calculamos los valores de significancia
alpha.value = 0.05
alpha.value.penalizado =
1 - ( 1 - alpha.value) ^ (1 / nrow(mydata.numeric))
# Establecemos la semilla para el método iterativo que calcula
# MCD, con el fin de obtener siempre los mismos resultados
set.seed(1)
# Generamos el gráfico con los outliers encontrados.
mvoutlier.plot = uni.plot(
mydata.numeric, symb = FALSE,
alpha = alpha.value.penalizado
)
# Chunk 44
# Construímos la variable is.MCD.outlier
is.MCD.outlier = mvoutlier.plot$outliers
numero.de.outliers.MCD = sum(is.MCD.outlier)
print(paste("Número de outliers MCD:", numero.de.outliers.MCD))
# Chunk 45
data.frame.solo.outliers = mydata.numeric.scaled[is.MCD.outlier, ]
head(data.frame.solo.outliers, 10)
# Chunk 46
MiBoxPlot_juntos(
mydata.numeric[1:10,],
is.MCD.outlier
) + coord_flip()
# Chunk 47
MiBiPlot_Multivariate_Outliers(
mydata.numeric[1:150,],
is.MCD.outlier[1:150],
"BiPlot de MCD"
)
# Chunk 48
indices.de.interes = 2
MiPlot_Univariate_Outliers(
mydata.numeric[1:50,],
indices.de.interes,
"Scatterplots de MCD (primeros 50 datos)"
)
# Chunk 49
is.Cerioli.outlier = cerioli2010.irmcd.test(
mydata.numeric,
signif.gamma = alpha.value
)$outliers
indices.outliers.cerioli = which(is.Cerioli.outlier)
numero.de.outliers.cerioli = sum(is.Cerioli.outlier)
print("Número de outlies 'Cerioli':")
numero.de.outliers.cerioli
print("Número de outlies 'mvoutlier':")
numero.de.outliers.MCD
# Chunk 50
MiBiPlot_Multivariate_Outliers(
mydata.numeric[1:150,],
is.Cerioli.outlier[1:150],
"MCD outliers según el paquete Cerioli"
)
mis.datos.numericos  = dataset.numeric.dt
mis.datos.numericos.normalizados    = scale(mis.datos.numericos)
rownames(mis.datos.numericos.normalizados) = rownames(mis.datos.numericos)
corr.plot(mis.datos.numericos[,1], mis.datos.numericos[,4])
corr.plot(mis.datos.numericos[,1], mis.datos.numericos[,3])
4
corr.plot(mis.datos.numericos[,1], mis.datos.numericos[,4])
par(mar(0,0,0,0))
par(mar = c(0,0,0,0))
corr.plot(mis.datos.numericos[,1], mis.datos.numericos[,4])
reset_par <- function(){
op <- structure(list(xlog = FALSE, ylog = FALSE, adj = 0.5, ann = TRUE,
ask = FALSE, bg = "transparent", bty = "o", cex = 1, cex.axis = 1,
cex.lab = 1, cex.main = 1.2, cex.sub = 1, col = "black",
col.axis = "black", col.lab = "black", col.main = "black",
col.sub = "black", crt = 0, err = 0L, family = "", fg = "black",
fig = c(0, 1, 0, 1), fin = c(6.99999895833333, 6.99999895833333
), font = 1L, font.axis = 1L, font.lab = 1L, font.main = 2L,
font.sub = 1L, lab = c(5L, 5L, 7L), las = 0L, lend = "round",
lheight = 1, ljoin = "round", lmitre = 10, lty = "solid",
lwd = 1, mai = c(1.02, 0.82, 0.82, 0.42), mar = c(5.1, 4.1,
4.1, 2.1), mex = 1, mfcol = c(1L, 1L), mfg = c(1L, 1L, 1L,
1L), mfrow = c(1L, 1L), mgp = c(3, 1, 0), mkh = 0.001, new = FALSE,
oma = c(0, 0, 0, 0), omd = c(0, 1, 0, 1), omi = c(0, 0, 0,
0), pch = 1L, pin = c(5.75999895833333, 5.15999895833333),
plt = c(0.117142874574832, 0.939999991071427, 0.145714307397962,
0.882857125425167), ps = 12L, pty = "m", smo = 1, srt = 0,
tck = NA_real_, tcl = -0.5, usr = c(0.568, 1.432, 0.568,
1.432), xaxp = c(0.6, 1.4, 4), xaxs = "r", xaxt = "s", xpd = FALSE,
yaxp = c(0.6, 1.4, 4), yaxs = "r", yaxt = "s", ylbias = 0.2), .Names = c("xlog",
"ylog", "adj", "ann", "ask", "bg", "bty", "cex", "cex.axis",
"cex.lab", "cex.main", "cex.sub", "col", "col.axis", "col.lab",
"col.main", "col.sub", "crt", "err", "family", "fg", "fig", "fin",
"font", "font.axis", "font.lab", "font.main", "font.sub", "lab",
"las", "lend", "lheight", "ljoin", "lmitre", "lty", "lwd", "mai",
"mar", "mex", "mfcol", "mfg", "mfrow", "mgp", "mkh", "new", "oma",
"omd", "omi", "pch", "pin", "plt", "ps", "pty", "smo", "srt",
"tck", "tcl", "usr", "xaxp", "xaxs", "xaxt", "xpd", "yaxp", "yaxs",
"yaxt", "ylbias"))
par(op)
}
reset_par()
corr.plot(mis.datos.numericos[,1], mis.datos.numericos[,4])
corr.plot(mis.datos.numericos[,1], mis.datos.numericos[,4])
plot(mis.datos.numericos.normalizados)
plot(mis.datos.numericos)
corr.plot(mis.datos.numericos[,6], mis.datos.numericos[,8])
corr.plot(mis.datos.numericos[,6], mis.datos.numericos[,7])
corr.plot(mis.datos.numericos[,6], mis.datos.numericos[,9])
corr.plot(mis.datos.numericos[,9], mis.datos.numericos[,7])
corr.plot(mis.datos.numericos[,8], mis.datos.numericos[,7])
corr.plot(mis.datos.numericos[,8], mis.datos.numericos[,6])
corr.plot(mis.datos.numericos[,8], mis.datos.numericos[,7])
corr.plot(mis.datos.numericos[,7], mis.datos.numericos[,8])
numero.de.vecinos.lof = 5
lof.scores = lofactor(mis.datos.numericos.normalizados, k=numero.de.vecinos.lof)
plot(lof.scores)
plot(lof.scores)
mis.datos.numericos.normalizados    = dataset.numeric.dt.norm
numero.de.vecinos.lof = 5
lof.scores = lofactor(
mis.datos.numericos.normalizados,
k=numero.de.vecinos.lof
)
plot(lof.scores)
plot(mis.datos.numericos.normalizados)
mis.datos.numericos  = dataset.numeric.dt
mis.datos.numericos.normalizados    = dataset.numeric.dt.norm
names(mis.datos.numericos.normalizados)
numero.de.vecinos.lof = 5
lof.scores = lofactor(
mis.datos.numericos.normalizados,
k=numero.de.vecinos.lof
)
plot(lof.scores)
is.lof.outlier = lof.scores > 1.4
is.lof.outlier
MiBiPlot_Multivariate_Outliers (mis.datos.numericos, is.lof.outlier, "LOF Outlier")
MiBiPlot_Multivariate_Outliers (mis.datos.numericos[1:50], is.lof.outlier[1:50], "LOF Outlier")
MiBiPlot_Multivariate_Outliers (mis.datos.numericos[1:50,], is.lof.outlier[1:50], "LOF Outlier")
MiBiPlot_Multivariate_Outliers (mis.datos.numericos[1:150,], is.lof.outlier[1:150], "LOF Outlier")
is.lof.outlier = lof.scores > 1.3
MiBiPlot_Multivariate_Outliers (mis.datos.numericos[1:150,], is.lof.outlier[1:150], "LOF Outlier")
is.lof.outlier = lof.scores > 1.2
MiBiPlot_Multivariate_Outliers (mis.datos.numericos[1:150,], is.lof.outlier[1:150], "LOF Outlier")
is.lof.outlier = lof.scores > 1.4
MiBiPlot_Multivariate_Outliers(
mis.datos.numericos[1:150,],
is.lof.outlier[1:150],
"LOF Outliers"
)
numero.de.outliers   = 5
numero.de.clusters   = 3
# Hacemos que los resultados de k-means sean repetibles
set.seed(2)
# Construimos el modelo
modelo.kmeans = kmeans(
mis.datos.numericos.normalizados,
centers = numero.de.clusters
)
# ¿A qué cluster pertenece cada dato?
indices.clustering.bankloan = modelo.kmeans$cluster
# ¿Cuáles son los centros de los clusters obtenidos?
centroides.normalizados.bankloan  = modelo.kmeans$centers
distancias_a_centroides = function(
datos.normalizados,
indices.asignacion.clustering,
datos.centroides.normalizados
) {
sqrt(
rowSums(
(
datos.normalizados -
datos.centroides.normalizados[indices.asignacion.clustering,]
)^2
)
)
}
# Calculamos las distancias
dist.centroides.bankloan =
distancias_a_centroides (
mis.datos.numericos.normalizados,
indices.clustering.bankloan,
centroides.normalizados.bankloan
)
indices.outliers.bankloan =
order(dist.centroides.bankloan, decreasing=T)[1:numero.de.outliers]
indices.outliers.bankloan =
order(dist.centroides.bankloan, decreasing=T)[1:numero.de.outliers]
top_clustering_outliers = function(datos.normalizados,
indices.asignacion.clustering,
datos.centroides.normalizados,
numero.de.outliers){
dist_centroides = distancias_a_centroides (datos.normalizados,
indices.asignacion.clustering,
datos.centroides.normalizados)
indices = order(dist_centroides, decreasing=T)[1:numero.de.outliers]
list(distancias = dist_centroides[indices]  , indices = indices)
}
top.outliers.kmeans = top_clustering_outliers(
mis.datos.numericos.normalizados,
indices.clustering.bankloan,
centroides.normalizados.bankloan,
numero.de.outliers
)
cat("Índices de los top k clustering outliers (k-means, usando distancia euclídea)")
top.outliers.kmeans$indices
cat("Distancias a sus centroides de los top k clustering outliers (k-means, usando distancia euclídea)")
top.outliers.kmeans$distancias
top.outliers.kmeans = top_clustering_outliers(
mis.datos.numericos.normalizados,
indices.clustering.bankloan,
centroides.normalizados.bankloan,
numero.de.outliers
)
cat("Índices de los top k clustering outliers (k-means, usando distancia euclídea)")
top.outliers.kmeans$indices
cat("Distancias a sus centroides de los top k clustering outliers (k-means, usando distancia euclídea)")
top.outliers.kmeans$distancias
numero.de.outliers   = 10
top.outliers.kmeans = top_clustering_outliers(
mis.datos.numericos.normalizados,
indices.clustering.bankloan,
centroides.normalizados.bankloan,
numero.de.outliers
)
cat("Índices de los top k clustering outliers (k-means, usando distancia euclídea)")
top.outliers.kmeans$indices
cat("Distancias a sus centroides de los top k clustering outliers (k-means, usando distancia euclídea)")
top.outliers.kmeans$distancias
top.outliers.kmeans = top_clustering_outliers(
mis.datos.numericos.normalizados,
indices.clustering.bankloan,
centroides.normalizados.bankloan,
numero.de.outliers
)
cat("Índices de los top k clustering outliers (k-means, usando distancia euclídea)")
top.outliers.kmeans$indices
cat("Distancias a sus centroides de los top k clustering outliers (k-means, usando distancia euclídea)")
top.outliers.kmeans$distancias
numero.de.datos   = nrow(mis.datos.numericos)
is.kmeans.outlier = rep(FALSE, numero.de.datos)
is.kmeans.outlier[top.outliers.kmeans$indices] = TRUE
is.kmeans.outlier[top.outliers.kmeans$indices] = TRUE
BIPLOT.isOutlier             = is.kmeans.outlier
BIPLOT.cluster.colors        = c("blue","red","brown")     # Tantos colores como diga numero.de.clusters
BIPLOT.asignaciones.clusters = indices.clustering.bankloan
MiBiPlot_Clustering_Outliers(mis.datos.numericos, "K-Means Clustering Outliers")
matriz.de.distancias              = dist(mis.datos.numericos.normalizados)
set.seed(2)
modelo.pam                        = pam(matriz.de.distancias , k = numero.de.clusters)
indices.asignacion.clustering.pam = modelo.pam$clustering
medoides.indices                  = modelo.pam$medoids
medoides.valores.normalizados     = mis.datos.numericos.normalizados[medoides.indices, ]
medoides.valores.normalizados
medoides.valores                  = mis.datos.numericos[medoides.indices, ]
medoides.valores
top.outliers.pam = top_clustering_outliers(mis.datos.numericos.normalizados ,
indices.asignacion.clustering.pam,
medoides.valores.normalizados,
numero.de.outliers)
cat("PAM Medoids\n")
print(medoides.valores)
cat("PAM Top Outliers\n")
print(top.outliers.pam$indices)
cat("kMeans Centroids\n")
print(centroides.valores)
mis.datos.medias        = colMeans(mis.datos.numericos)
mis.datos.desviaciones  = apply(mis.datos.numericos, 2, sd , na.rm = TRUE)
centroides.valores      = sweep(centroides.normalizados.bankloan,
2,
mis.datos.desviaciones,
"*")
centroides.valores      = sweep(centroides.valores,
2,
mis.datos.medias,
"+")
cat("PAM Medoids\n")
print(medoides.valores)
cat("PAM Top Outliers\n")
print(top.outliers.pam$indices)
cat("kMeans Centroids\n")
print(centroides.valores)
cat("kMeans Top Outliers\n")
print(top.outliers.kmeans$indices)
top_clustering_outliers_distancia_mahalanobis = function(datos,
indices.asignacion.clustering,
numero.de.outliers){
cluster.ids = unique(indices.asignacion.clustering)
k           = length(cluster.ids)
seleccion   = sapply(1:k, function(x) indices.asignacion.clustering == x)
# Usando medias y covarianzas:
# lista.matriz.de.covarianzas   = lapply(1:k, function(x) cov(mis.datos.numericos[seleccion[,x],]))
# lista.vector.de.medias        = lapply(1:k, function(x) colMeans(mis.datos.numericos[seleccion[,x],]))
# Usando la estimación robusta de la media y covarianza: (cov.rob del paquete MASS:
lista.matriz.de.covarianzas   = lapply(1:k, function(x) cov.rob(mis.datos.numericos[seleccion[,x],])$cov)
lista.vector.de.medias        = lapply(1:k, function(x) cov.rob(mis.datos.numericos[seleccion[,x],])$center)
mah.distances   = lapply(1:k,
function(x) mahalanobis(mis.datos.numericos[seleccion[,x],],
lista.vector.de.medias[[x]],
lista.matriz.de.covarianzas[[x]]))
todos.juntos = unlist(mah.distances)
todos.juntos.ordenados = names(todos.juntos[order(todos.juntos, decreasing=TRUE)])
indices.top.mah.outliers = as.numeric(todos.juntos.ordenados[1:numero.de.outliers])
list(distancias = mah.distances[indices.top.mah.outliers]  , indices = indices.top.mah.outliers)
}
top.clustering.outliers.mah = top_clustering_outliers_distancia_mahalanobis(mis.datos.numericos,
indices.clustering.bankloan,
numero.de.outliers)
numero.de.datos = nrow(mis.datos.numericos)
is.kmeans.outlier.mah = rep(FALSE, numero.de.datos)
is.kmeans.outlier.mah[top.clustering.outliers.mah$indices] = TRUE
BIPLOT.isOutlier             = is.kmeans.outlier.mah
BIPLOT.cluster.colors        = c("blue","red","brown")     # Tantos colores como diga numero.de.clusters
BIPLOT.asignaciones.clusters = indices.asignacion.clustering.kmeans
MiBiPlot_Clustering_Outliers(mis.datos.numericos, "K-Means Clustering Outliers")
###########################################################################
# Ampliación:
# Definir la función top_clustering_outliers_distancia_relativa
# Esta función hará lo mismo que la función top_clustering_outliers
# pero usando como criterio la distancia relativa
# (pag. 121 de las transparencias)
top_clustering_outliers_distancia_relativa = function(datos.normalizados,
indices.asignacion.clustering,
datos.centroides.normalizados,
numero.de.outliers){
dist_centroides = distancias_a_centroides (datos.normalizados,
indices.asignacion.clustering,
datos.centroides.normalizados)
cluster.ids = unique(indices.asignacion.clustering)
k           = length(cluster.ids)
distancias.a.centroides.por.cluster    = sapply(1:k ,
function(x) dist_centroides [indices.asignacion.clustering  == cluster.ids[x]])
distancias.medianas.de.cada.cluster    = sapply(1:k ,
function(x) median(dist_centroides[[x]]))
todas.las.distancias.medianas.de.cada.cluster  =  distancias.medianas.de.cada.cluster[indices.asignacion.clustering]
ratios = dist_centroides   /  todas.las.distancias.medianas.de.cada.cluster
indices.top.outliers           = order(ratios, decreasing=T)[1:numero.de.outliers]
list(distancias = ratios[indices.top.outliers]  , indices = indices.top.outliers)
}
top.outliers.kmeans.distancia.relativa = top_clustering_outliers_distancia_relativa(mis.datos.numericos.normalizados,
indices.clustering.bankloan,
centroides.normalizados.bankloan,
numero.de.outliers)
cat("Índices de los top k clustering outliers (k-means, usando distancia relativa)")
top.outliers.kmeans.distancia.relativa$indices
cat("Distancias a sus centroides de los top k clustering outliers (k-means, usando distancia relativa)")
top.outliers.kmeans.distancia.relativa$distancias
###########################################################################
# Ampliación:
# Definir la función top_clustering_outliers_distancia_relativa
# Esta función hará lo mismo que la función top_clustering_outliers
# pero usando como criterio la distancia relativa
# (pag. 121 de las transparencias)
top_clustering_outliers_distancia_relativa = function(datos.normalizados,
indices.asignacion.clustering,
datos.centroides.normalizados,
numero.de.outliers){
dist_centroides = distancias_a_centroides (datos.normalizados,
indices.asignacion.clustering,
datos.centroides.normalizados)
cluster.ids = unique(indices.asignacion.clustering)
k           = length(cluster.ids)
distancias.a.centroides.por.cluster    = sapply(1:k ,
function(x) dist_centroides [indices.asignacion.clustering  == cluster.ids[x]])
distancias.medianas.de.cada.cluster    = sapply(1:k ,
function(x) median(dist_centroides[[x]]))
todas.las.distancias.medianas.de.cada.cluster  =  distancias.medianas.de.cada.cluster[indices.asignacion.clustering]
ratios = dist_centroides   /  todas.las.distancias.medianas.de.cada.cluster
indices.top.outliers           = order(ratios, decreasing=T)[1:numero.de.outliers]
list(distancias = ratios[indices.top.outliers]  , indices = indices.top.outliers)
}
top.outliers.kmeans.distancia.relativa = top_clustering_outliers_distancia_relativa(mis.datos.numericos.normalizados,
indices.clustering.bankloan,
centroides.normalizados.bankloan,
numero.de.outliers)
cat("Índices de los top k clustering outliers (k-means, usando distancia relativa)")
top.outliers.kmeans.distancia.relativa$indices
cat("Distancias a sus centroides de los top k clustering outliers (k-means, usando distancia relativa)")
top.outliers.kmeans.distancia.relativa$distancias
is.kmeans.outlier.dist.rel = rep(F, nrow(mis.datos.numericos))
BIPLOT.isOutlier             = is.kmeans.outlier.dist.rel
BIPLOT.cluster.colors        = c("blue","red","brown")
BIPLOT.asignaciones.clusters = indices.asignacion.clustering.kmeans
MiBiPlot_Clustering_Outliers(mis.datos.numericos, "K-Means Clustering Outliers (Mahalanobis distance)")
is.kmeans.outlier.dist.rel[top.outliers.kmeans.distancia.relativa$indices] = T
BIPLOT.isOutlier             = is.kmeans.outlier.dist.rel
BIPLOT.cluster.colors        = c("blue","red","brown")
MiBiPlot_Clustering_Outliers(mis.datos.numericos, "K-Means Clustering Outliers (Mahalanobis distance)")
